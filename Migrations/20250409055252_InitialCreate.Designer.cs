// <auto-generated />
using System;
using AcmeAirlines.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AcmeAirlines.Migrations
{
    [DbContext(typeof(AcmeAirlinesContext))]
    [Migration("20250409055252_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AcmeAirlines.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BOG",
                            Country = "Colombia",
                            Name = "Bogotá"
                        },
                        new
                        {
                            Id = 2,
                            Code = "MDE",
                            Country = "Colombia",
                            Name = "Medellín"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CLO",
                            Country = "Colombia",
                            Name = "Cali"
                        },
                        new
                        {
                            Id = 4,
                            Code = "MIA",
                            Country = "Estados Unidos",
                            Name = "Miami"
                        },
                        new
                        {
                            Id = 5,
                            Code = "MAD",
                            Country = "España",
                            Name = "Madrid"
                        });
                });

            modelBuilder.Entity("AcmeAirlines.Models.Fare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<decimal>("ChangeFee")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<bool>("IncludesCheckedBaggage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRefundable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Fares");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableSeats = 120,
                            ChangeFee = 100000m,
                            Description = "Tarifa básica sin equipaje facturado",
                            FlightId = 1,
                            IncludesCheckedBaggage = false,
                            IsRefundable = false,
                            Name = "Económica",
                            Price = 250000m
                        },
                        new
                        {
                            Id = 2,
                            AvailableSeats = 50,
                            ChangeFee = 50000m,
                            Description = "Tarifa con equipaje y cambios permitidos",
                            FlightId = 1,
                            IncludesCheckedBaggage = true,
                            IsRefundable = true,
                            Name = "Ejecutiva",
                            Price = 350000m
                        },
                        new
                        {
                            Id = 3,
                            AvailableSeats = 10,
                            ChangeFee = 0m,
                            Description = "Tarifa completa con todos los servicios",
                            FlightId = 1,
                            IncludesCheckedBaggage = true,
                            IsRefundable = true,
                            Name = "Premium",
                            Price = 450000m
                        });
                });

            modelBuilder.Entity("AcmeAirlines.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("integer");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DestinationCityId")
                        .HasColumnType("integer");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("OriginCityId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCityId");

                    b.HasIndex("OriginCityId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArrivalTime = new DateTime(2025, 5, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            AvailableSeats = 180,
                            BasePrice = 250000m,
                            DepartureTime = new DateTime(2025, 5, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            DestinationCityId = 2,
                            FlightNumber = "AM101",
                            OriginCityId = 1,
                            Status = "Scheduled",
                            TotalSeats = 180
                        },
                        new
                        {
                            Id = 2,
                            ArrivalTime = new DateTime(2025, 5, 1, 11, 0, 0, 0, DateTimeKind.Utc),
                            AvailableSeats = 180,
                            BasePrice = 270000m,
                            DepartureTime = new DateTime(2025, 5, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            DestinationCityId = 1,
                            FlightNumber = "AM102",
                            OriginCityId = 2,
                            Status = "Scheduled",
                            TotalSeats = 180
                        },
                        new
                        {
                            Id = 3,
                            ArrivalTime = new DateTime(2025, 5, 2, 10, 0, 0, 0, DateTimeKind.Utc),
                            AvailableSeats = 220,
                            BasePrice = 850000m,
                            DepartureTime = new DateTime(2025, 5, 2, 6, 0, 0, 0, DateTimeKind.Utc),
                            DestinationCityId = 4,
                            FlightNumber = "AM201",
                            OriginCityId = 1,
                            Status = "Scheduled",
                            TotalSeats = 220
                        });
                });

            modelBuilder.Entity("AcmeAirlines.Models.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("AcmeAirlines.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FareId")
                        .HasColumnType("integer");

                    b.Property<int>("FlightId")
                        .HasColumnType("integer");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<string>("ReservationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FareId");

                    b.HasIndex("FlightId");

                    b.HasIndex("PassengerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("AcmeAirlines.Models.Fare", b =>
                {
                    b.HasOne("AcmeAirlines.Models.Flight", "Flight")
                        .WithMany("Fares")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("AcmeAirlines.Models.Flight", b =>
                {
                    b.HasOne("AcmeAirlines.Models.City", "DestinationCity")
                        .WithMany("DestinationFlights")
                        .HasForeignKey("DestinationCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AcmeAirlines.Models.City", "OriginCity")
                        .WithMany("OriginFlights")
                        .HasForeignKey("OriginCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationCity");

                    b.Navigation("OriginCity");
                });

            modelBuilder.Entity("AcmeAirlines.Models.Reservation", b =>
                {
                    b.HasOne("AcmeAirlines.Models.Fare", "Fare")
                        .WithMany()
                        .HasForeignKey("FareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcmeAirlines.Models.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcmeAirlines.Models.Passenger", "Passenger")
                        .WithMany("Reservations")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fare");

                    b.Navigation("Flight");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("AcmeAirlines.Models.City", b =>
                {
                    b.Navigation("DestinationFlights");

                    b.Navigation("OriginFlights");
                });

            modelBuilder.Entity("AcmeAirlines.Models.Flight", b =>
                {
                    b.Navigation("Fares");
                });

            modelBuilder.Entity("AcmeAirlines.Models.Passenger", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
